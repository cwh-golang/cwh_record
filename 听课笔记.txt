
1、命令行输入：godoc -http=:8080
	浏览器输入：http://localhost:8080
	
2、go install 是编译包的命令；

3、只有.go文件中package main时，才能生成可执行文件，否则就是生成
   包文件；可执行的go文件，有且只有一个main函数；

4、sublime text 2 入门技巧
    详解配置sublime text 2/3的Golang开发环境
	https://blog.csdn.net/kibaamor/article/details/39807897

5、main函数既没有参数，有没有返回值

6、语言级别支持utf-8，可以直接使用中文

7、sublime text 2 调出命令行：Ctrl + b
   查看所有的快捷键ctrl + . + .
   查看函数定义：ctrl + . + g
   查看函数声明：Ctrl + . + h
   
8、对导入的包进行调用的格式：包名.函数名()

9、go语言的结构：打包 - 导入包 - 常量的定义 - 全局变量的定义和声明 - 一般类型的声明 - 结构的声明 - 接口的声明 - 函数的定义

10、函数体内不能进行多个变量的同时声明，不能用（）这种方式 ，只能使用并行的方式进行声明和定义

11、rune 与 Unicode 有关

12、go语言中，函数可以赋值给变量

13、零值：变量被声明后的一个默认值： 0 、false 、nil
	全局变量的声明不可以用 := 的方式，必须用显示的指定变量的类型
	
14、数组与切片的区别：数组指定长度/容量，切片不指定

15、运行过程中，检查变量的值有没有超过变量的范围：math包中有，例如:int32的最大值 math.Maxint32

16、go语言中不允许隐式的强制类型转换，所有的强制类型转换都必须人工写出来；从而保证go的类型安全；只能发生在两个相互兼容的类型之间

17、枚举类型？与其他类型不一样 iota 常量：全部大写

18、go语言中的运算符全部是从左至右结合的

19、++ -- 运算符只能放在变量的右边，而且不能在表达式的右边，只能单独一行；

20、if语句后面没有括号，支持初始化表达式

21、相同数组类型可以直接进行赋值，这里相同类型指的是长度和所含元素类型一样；
    golang的数组是值类型，而不是引用类型，在进行函数传递的时候，需要将整个数组的值拷贝给函数，而不是将数组的地址
	传递给函数；如果需要传递一个地址，就使用数组切片的方式；
	两个类型相同的数组，可以进行相等或者不等的比较，如果数组元素相同，则结果为true，否则为false
	
22、指向数组的指针：将数组的地址取出来，赋值给该指针；直接用new出来的数据返回的也是一个数组指针：p:=new([10]int)
    数组是固定长度的，在定义的时候已经指定；

23、fmt.Println()不能用来打印数组地址，不能进行格式化打印；

24、map类型 键 -- 值对应 采用哈希查找的方式进行元素查找，速度比线性查找快一些，但是比数组、slice（下标查找）慢
    其实数组和slice的下标和数组值是更广义的键值对；
	map的键值对是无须的

25、SublimeText 可以通过Ctrl与+/-号的组合来对字体进行大小调节；

26、go函数可接受不定长变参 func foo(a ...int)(){} 其实a是一个slice

27、defer函数放在后面的先调用

28、闭包--查百度 查了，没有看懂

29、go语言没有指针运算，struct不能用 -> 操作

30、struct 是值类型，传递的时候是进行结构复制

31、struct在实例化的时候，都采用取地址符号

32、匿名结构，没有名字的结构；匿名结构可以嵌套在其他结构体中；匿名字段：只有字段的类型，没有字段的名称，
    在进行初始化的时候，要讲对应的类型赋值给对应的字段类型；

33、不同结构体名的struct属于不同类型，哪怕结构体成员相同也不是同一种结构体；

34、结构体组合：在一个接头体中嵌入另一个结构体；

35、结构的方法：method

36、通过方法的绑定，可以为任何一种type定义的类型添加方法；

37、go的结构体不用显示声明属于某个接口，只要结构体的方法实现了接口的方法，就认为是实现了某个接口；

38、接口通过接受不同类型的struct实现多态的功能

39、反射，程序的灵活性；获取传入接口的类型和字段信息；

40、有缓存和无缓存：有缓存是异步进行的，无缓存是同步进行的；

41、在某个文件夹下右击，选择git bush here，就可以启动MING32进行go编译了。

42、匿名函数、闭包，函数返回时，以一个具体的函数作为返回值；实际上是返回的一个函数指针，然后赋值给某个变量，
    然后直接用这个变量进行函数的调用，其中函数内部的变量值保持不变

43、函数的变长参数传递，实际上是传递的slice结构；

44、可以用range来遍历的量：数组，slice，map，string

45、在MinGW下，ls -list可以用于按列列出所有的文件；
     shift+pgup/pgdn 进行上下翻页，shift+上/下键，进行上下切换；
	使用cat >> filename可以新建一个文件，并写入内容，按ctrl+d可以保持并退出；
	cat filename 可以打开并浏览文件
	在MinGW中用ioutil.Readfile()打开文件要用全路径名
	
46、在定义结构体成员函数的时候，可以为值类型或者指针类型的接受器定义方法；
    值类型的接收器无法改变结构体的成员变量的值，指针型的接收器可以改变结构体的成员变量；
	
47、selcet语句需要等到一个case之后，才能继续往下执行；阻塞式的，而且case的语句必须是IO语句，有点像单片机的
    中断系统的功能；与timeout功能一起连用，可以实现超时等待的功能；

48、在json结构体中，要用ESC下面那个按键符号

49、文件操作：打开一个文件，读取文件的内容，写入数据到文件中，关闭一个文件

50、在命令行中输入：godoc -http=:8080,然后用浏览器输入http://localhost/8080/即可阅读go的参考文档;

51、gopath 环境变量设置的时候，最后一个路径后面不加分号，否则找不到最后一个路径；
    D:\goproject;D:\goyard\sorter;D:\goyard\sorter\sorter
	
52、go test -v xxx_test.go 直接进入xxx_test.go路径下，执行该命令能进行test

53、git的使用方法
	git clone 
	git status 查看状态
	git add .  把当前改动添加到缓存
	git commit -m ""
	git push
	git diff  查看不同

/*************************************go web********************************************/

54、sqlite3 bootcss beego

55、Request Response	

56、看视频第二集：《初窥 Web 开发》32.31  （Unknown讲这个视频的时候是2013年8月6日）
	在运行bee run 的时候报错，如下：
	bee run myapp
	No application 'myapp' found in your GOPATH 

	分析：由于在运行bee new myapp时的路径不是在src下，所以在运行bee run myapp时，系统报找不myapp

	解决办法：重新再src下运行bee new myapp，重新生成myapp文件，再次执行bee run myapp，就能正常运行了

57、用Visual Studio Code来组织文件结构，用sublime text来进行代码编辑，
    Visual Studio Code ：用来编译安装整个文件
	sublime text：编辑代码时有提示，方便 ，二者结合起来用，可以充分发挥优势

	
/*************************************go by example********************************************/

1、
变量声明的方式：
函数内的变量：
    var a int
    var a int = 1
	var a = 1
	a := 1
	var a ,b = 1 ,2

函数外的变量(必须加var)：
    var a int
    var a int = 1
	var a = 1

2、fmt.Printf("%q",s) //可以将双引号打出来，用引号将字符串引起

3、go语言中声明常量需要用const关键字，而不是用var关键字

4、



/*************************************ccmouse********************************************/



1、

2、go语言中，const量为常量，只是进行字符串替换，有点类似于c语言中的宏，
在初始声明的时候，如果没有指定类型，则根据其在使用时根据实际情况
推测；

3、idea的使用技巧：ctrl+alt+l 对文档进行格式化
                   Ctrl+Alt+V，可以引入变量。例如：new String(); 自动导入变量定义，也可以修改变变量的名称，使之
				                生成一个变量
                   ctrl+D   复制上一行
				   Ctrl+Shift+Alt+J 批量修改变量名
				   alt+insert 插入set/get方法
				   

4、所使用过的包：
   cmlpx io/ioutil os math reflect runtime bufio strconv fmt unicode/utf8 strings io
   testing 

5、所有数据定义的方法，都熟练使用一种；
  var b bool
  var s string
  var i int
  var b byte
  var r rune
  var f float32
  var c complex64       
  
  var arr1 [5]int      arr2 := [...]int{1,2,3,4,5}  //---------------------自己喜欢使用的方法

6、数组的遍历：
   A、for i := 0; i < len(arr3); i++ {
   B、for i := range arr3 {
   C、for i,v:=range arr3{      //---------------------自己喜欢使用的方法
   
7、A、slice是对原本数组的一个veiw；
   B、将数组取为slice的方法：arr[:]
   C、Reslice : s = s[2:]
   D、slice 的扩展：           //---------------------ccmouse课程中第一个比较难的问题
   E、slice的指针、len cap
   F、在对slice进行append的时候，随着append的数量越来越大，go语言会自动重新分配一段内存
      来装在数据，不再是对从前的数组的一个view；
   G、声明一个slice之后就可以用，不用先分配一定的空间（应该是通过append之类的功能来实现的），
      直接往里面添加值，系统不会崩溃；
   H、内建函数 make append len cap
   I、slice的创建：s := make([]int,10,15)   //---------------------自己喜欢使用的方法
   J、slice的copy的时候，以最小的数组的长度为zhun；
   K、元素的删除，从头删除，从尾部删除
   L、从头部删除元素，cap会自减，从尾部删除元素，cap不一定会自减；
   
8、A、map的建立方法：
      m:=map[string]string{}
      m:=make(map[string]int)
   B、map的便利 for k,v := range m {}
      获取map的元素：value,ok := m["hello"]，判断ok可以判断出元素是否存在
   
9、字符串也可以向slice操作：
    s := "hello world"
	s = s[2:3]
	
10、如果要处理国际化的语言，尽量将传进来的字符串先转换成rune类型，例如：
    r := []rune(s) 

11、结构的建立：tree:=new(node)
    采用指针接受和采用值接受对方法的调用者是没有区别的，都可以；

12、包名和目录名可以不一样，但是每个目录下面只能有一个包； //-----------我一直比较犯糊涂的地方
    包名与路径名不一样
    import的时候需要用路径名
	实际在调用的时候需要引用包名
	关于引用包的问题：如何引用github上的包？如何实际操作？
	
13、包的封装：定义别名和使用组合

14、go SDK 1.11自动集成了goimports功能，如果引入的包没有使用，自动会被删除 //-----------这个功能好爽
               如果暂时不使用某个包，可以咋包名前面加一个"_"，例如： _ "math"

15、go get + url 可以从网站上拉下一下东西来 ，获取第三方库；
    但是某些包可能无法拉下来，比如在Google服务器上的，可采用gopm去拿：
	go get -v github.com/gpmgo/gopm
	gopm get -g -v -u golang.org/x/tools/cmd/goimports

16、go语言是面向接口的编程语言，与传统的面向对象的语言不同

17、对interface的理解   //---------------------ccmouse课程中第二个比较难的问题

18、go语言中比较重要的接口：string reader writer

19、在函数接口的演示程序中，fib.go里面，当p的空间太小之后，会导致空间不够，会出问题，但是
    ccmouse的解决方案我没有听懂  //---------------------需要在下一次视频学习的时候，深入理解

20、对函数闭包的理解  //---------------------ccmouse课程中第三个比较难的问题

21、idea 在使用的时候，需要先将工程路径配置到gopath中，否则在编译的时候，可能会报不能找到某个函数/某个包的错误；
    配置方法：file -- settings -- gopath -- global path，旁边有个“+”，在将工程目录所处的环境加入即可；
	
22、在idea中调用os.Open(filename)时，需要将gopath下面的全路径传递给filename，否则报错，无法打开文件；

23、文件被打开后智能读取一次，再次读取时，就会读不到里面的内容，需要重新关闭之后再的打开。	

24、正则表达式获取网页图片：
    reg := regexp.MustCompile(`[a-zA-z]+://[^\s]*(jpg|png|gif|jpeg|JPG|PNG|JPEG)`)

25、golang的时间包好像有点问题，下面这个例子运行出来的结果不正确：
  https://play.golang.org/p/HFD0bdh_4oI	
	
/*************************************待搞清楚的算法，也是课程中举的比较多的例子********************************/
1、整形数字转二进制的算法；
2、寻找最长不含有重复字符的字串
    a b d a f g d s k m n
	
	bytes := []byte(s)
	start := 0
	lastOccurred := make(map[byte]int)
	maxLen := 0
	
	for i , ch := range bytes{
		lastI,ok := lastOccurred[ch]
		if ok && lastI >= start{
		
		}
		if
		
		lastOccurred[ch] = i
	}
	
	
递归：先找长度为 len，看里面是否有重复字符，
                       找里面是否有重复字符的方法：



































    
